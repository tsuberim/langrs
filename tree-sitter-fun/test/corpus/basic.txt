==================
Number
==================
12312
---
(source_file
  (num)
)

==================
Comment
==================
# asdfasdf
12312
---
(source_file
  (comment)
  (num)
)

==================
String
==================
`somestring`
---
(source_file
  (str (str_lit))
)

==================
Empty String
==================
``
---
(source_file
  (str)
)

==================
Template String
==================
`hello {name}, nice to meet you`
---
(source_file
  (str 
    (str_lit) 
    (id) 
    (str_lit)
  )
)

==================
Identifier
==================
x
---
(source_file
  (id)
)

==================
Tag
==================
X
---
(source_file
  (tag (tag_id))
)

==================
Tag with payload
==================
X 2
---
(source_file
  (tag (tag_id) (num))
)

==================
Tag with record payload
==================
X{foo: 2}
---
(source_file
  (tag (tag_id) (record (id) (num)))
)

==================
Lambda
==================
\x -> x
---
(source_file
  (lam (id) (id))
)

==================
Block
==================
(
  x = 2
  y = 4
  y
)
---
(source_file
  (block
    (def (id) (num))
    (def (id) (num))
    (id)
  )
)

==================
Application
==================
(\x -> x)(32)
---
(source_file
  (app (block (lam (id) (id))) (num))
)

==================
Record
==================
{
  foo: 2,
  bar: `str`,
  baz: {}
}
---
(source_file
  (record 
    (id) (num)
    (id) (str (str_lit))
    (id) (record)
  )
)


==================
List
==================
[1,2,3]
---
(source_file
  (list 
    (num)
    (num)
    (num)
  )
)

==================
Match
==================
when y is Foo z -> 2; Bar x -> x
---
(source_file
  (match 
    (id)
    (tag_id)
    (id)
    (num)
    (tag_id)
    (id)
    (id)
  )
)

==================
Match else
==================
when y is Foo z -> 2 else 5
---
(source_file
  (match 
    (id)
    (tag_id)
    (id)
    (num)
    (num)
  )
)

==================
Match nested
==================
when y is Bar x -> when x is Foo z -> 2
---
(source_file
  (match 
    (id)
    (tag_id)
    (id)
    (match
      (id)
      (tag_id)
      (id)
      (num)
    )
  )
)

==================
Access
==================
x.name
---
(source_file
  (access 
    (id)
    (id)
  )
)


==================
Infix application
==================
1 + 1
---
(source_file
  (infix_app 
    (num)
    (sym)
    (num)
  )
)

==================
Typings
==================
(
  x : a
  x : List<a>
  x : [Bar {|a}]
  x : {name: Str}
  x : \Num, a, (\b -> c) -> List<a>
  x
)
---
(source_file
  (block 
    (type_def 
      (id) 
      (id)
    )
    (type_def 
      (id) 
      (type_app (tag_id) (id))
    )
    (type_def 
      (id) 
      (type_union (tag_id) (type_record (id)))
    )
    (type_def 
      (id) 
      (type_record (id) (type_app (tag_id)))
    )
    (type_def
      (id)
      (type_lam
        (type_app (tag_id))
        (id)
        (type_parens (type_lam (id) (id)))
        (type_app (tag_id) (id))
      )
    )
    (id)
  )
)

